#!/usr/bin/java org.mozilla.javascript.tools.shell.Main

load("core.js");

function main() {
    
    var env = "development",
        options = { port : 8080, host : "0.0.0.0" },
        server = null,
        config = null,
        configFile = null;

    while (ARGV.length) {
        var arg = ARGV.shift();
        switch (arg) {
            case "-e" :
            case "--eval" :
                configFile = ARGV.shift();
                break;
            case "-I" :
            case "--include" :
                Array.prototype.unshift.apply(require.paths, ARGV.shift().split(":"));
                break;
            case "-d" :
            case "--debug" :
                $DEBUG = true;
                break;
            case "-w" :
            case "--warn" :
                $WARN = true;
                break;
            case "-s" :
            case "--server" :
                server = ARGV.shift();
                break;
            case "-o" :
            case "--host" :
                options.host = ARGV.shift();
                break;
            case "-p" :
            case "--port" :
                options.host = ARGV.shift();
                break;
            case "-E" :
            case "--env" :
                env = ARGV.shift();
                break;
            case "-r" :
            case "--require" :
                require(ARGV.shift());
                break;
            case "-h" :
            case "--help" :
                printUsage();
            case "--version" :
                throw new Error("Jack 0.1");
            default :
                if (config || arg.charAt(0) === "-")
                    printUsage();
                else
                    config = arg;
        }
    }

    if (!configFile) {
        config = config || "config.ju"

        var configFile = readFile(config);
        if (!configFile)
            throw new Error("configuration " + config + " not found");
    }

    var innerApp = eval(configFile),
        app;

    switch (env) {
        case "development" :
            app = require("jack/commonlogger").CommonLogger(
                    require("jack/showexceptions").ShowExceptions(
                        require("jack/lint").Lint(innerApp)));
            break;
        case "deployment" :
            app = require("jack/commonlogger").CommonLogger(innerApp);
            break;
        case "none" :
            app = innerApp;
            break;
        default :
            throw new Error("Unknown environment");
    }

    // Load the required handler.
    server = require("jack/handler/" + (server || "jetty"));
    
    server.run(app, options);
}

function printUsage() {
    throw new Error("Usage: jackup [jack options] [jackup config]\n\
\n\
    Jack options:\n\
      -s, --server SERVER      serve using SERVER (jetty/simple)\n\
      -o, --host HOST          listen on HOST (default: 0.0.0.0)\n\
      -p, --port PORT          use PORT (default: 9292)\n\
      -E, --env ENVIRONMENT    use ENVIRONMENT for defaults (default: development)\n\
\n\
      -e, --eval LINE          evaluate a LINE of code\n\
      -d, --debug              set debugging flags (set $DEBUG to true)\n\
      -w, --warn               turn warnings on for your script\n\
      -I, --include PATH       specify $LOAD_PATH (may be used more than once)\n\
      -r, --require LIBRARY    require the library, before executing your script\n\
\n\
    Common options:\n\
      -h, --help               Show this message\n\
          --version            Show version");
}

try {
    main();
} catch (e) {
    print(e.message);
}
